/**
 * VOXL Vision PX4 Configuration File
 *
 * version: don't touch this, used to keep track of changing config file formats
 *
 * ##############################################################################
 * ## MAVROS MAVSDK
 * ##############################################################################
 *
 * en_localhost_mavlink_udp:
 *         If you are running MAVROS/MAVSDK onboard VOXL and wish to open access to
 *         PX4 through a localhost UDP port simply ensure the follow feature is
 *         enabled. This is set to true by default. This will allow one local process
 *         to communicate with PX4 via port 14551 by default, NOT 14550 which is
 *         reserved for connections outside the board. These separation prevents
 *         conflicts between the two sockets. Both MAVROS and MAVSDK can be
 *         configured to use this port.
 *
 * localhost_udp_port_number:
 *         Port number for localhost UDP socket, default 14551
 *
 * ##############################################################################
 * ## VIO
 * ##############################################################################
 *
 * en_vio:
 *         Enable processing of VIO data from MPA to be sent to PX4 as mavlink
 *         odometry messages. Enabled by default.
 *
 * vio_pipe:
 *         Primary pipe to subscribe to for VIO data. Must be a standard libmodal-pipe
 *         vio_data_t type. Default is qvio. If no data is available on this pipe
 *         then voxl-vision-hub will subscribe to secondary_vio_pipe instead.
 *
 * secondary_vio_pipe:
 *         Secondary pipe to subscribe to for VIO data. Must be a standard libmodal-pipe
 *         vio_data_t type. Default is ov for openvins. If no data is available on this
 *         pipe then voxl-vision-hub will subscribe to the primary vio_pipe instead.
 *         Set to an empty string to disable. Default: ov
 *
 * en_reset_vio_if_initialized_inverted:
 *         For VIO algorithms like qVIO that can initialize in any orientation
 *         and output their estimate of the gravity vector, we suggest leaving
 *         this enabled to allow vvpx4 to automatically send the reset signal
 *         back to the VIO pipe if VIO was initialized upside-down or sufficiently
 *         off-level. Helpful if the user powers on a drone while carrying it to
 *         the flight area and VIO starts too early.
 *
 * vio_warmup_s:
 *         Wait this for this amount of time of having good VIO data before
 *         actually starting to send to PX4. This helps stop EKF2 getting
 *         confused if VIO flickers in and out while struggling to init.
 *         Set to 0 to disable the feature.
 *
 * send_odom_while_failed:
 *         On by default. Send Odometry messages to PX4 with a quality of -1 when
 *         VIO indicates a failure so EKF2 can start dead reckoning.
 *         This MAY need to be turned off with PX4 versions older than 1.14
 *         since the quality metric was no implemented prior to PX4 1.14
 *
 * ##############################################################################
 * ## APQ8096-only Features
 * ##############################################################################
 *
 * en_set_clock_from_gps:
 *         Enable setting the VOXL system time to GPS time if no NTP server can be
 *         reached via network to set the time.
 *
 * en_force_onboard_mav1_mode:
 *         Force PX4 to use onboard mode for mavlink 1 channel which is the channel
 *         apq8096 (VOXL1) uses to communicate UART Mavlink with PX4. Not applicable
 *         to qrb5165-based platforms. Sets the MAV1_MODE PX4 param.
 *
 * en_reset_px4_on_error:
 *         Trigger a reboot of PX4 one some of PX4's unrecoverable errors,
 *         Not applicable to qrb5165
 *         Yaw estimate error & High Accelerometer Bias and both detected
 *
 * ##############################################################################
 * ## Misc Features
 * ##############################################################################
 *
 * horizon_cal_tolerance:
 *         Allowable standard deviation in roll/pitch values to consider the drone
 *         stable enough in flight to do a PX4 horizon calibration. Default is 0.45,
 *         you can increase this slightly if flying in a small indoor area or with
 *         a drone that does not hold still very well.
 *         See https://docs.modalai.com/calibrate-px4-horizon/
 *
 * ##############################################################################
 * ## offboard mode config
 * ##############################################################################
 *
 * offboard_mode: The following are valid strings
 *     off: VVPX4 will not send any offboard commands to PX4
 *     figure_eight: Default value, VVPX4 commands PX4 to fly a figure 8 path
 *     follow_tag: Drone will follow an apriltag around. Very dangerous, not
 *                 recommended for customer use, for ModalAI R&D only.
 *     trajectory: VVPX4 receives polynomial trajectories by pipe and commands
 *                 PX4 to follow the trajectory path. Still in development.
 *     backtrack:  Drone will replay, in reverse order, the last few seconds of it's
 *                 position including yaw. This is useful when the drone loses
 *                 the communication link and needs to get back to a place where
 *                 it is able to regain the link. This mode will notice when the
 *                 RC link goes away and sends a command to px4 to enter offboard mode.
 *     wps:        read waypoints in local coordinate system
 *
 * follow_tag_id:
 *         Apriltag ID to follow in follow_tag mode
 *
 * figure_eight_move_home:
 *         Enable by default, resets the center of the figure 8 path to wherever
 *         the drone is when flipped into offboard mode. When disabled, the drone
 *         will quickly fly back to the XYZ point 0,0,-1.5 in VIO frame before
 *         starting the figure 8. Disabling this feature can be dangerous if VIO
 *         has drifted significantly.
 *
 * wps_move_home:
 *         Enable by default, resets the center of the wps path to wherever
 *         the drone is when flipped into offboard mode. When disabled, the drone
 *         will quickly fly back to the XYZ point 0,0,-1.5 in VIO frame before
 *         starting the figure 8. Disabling this feature can be dangerous if VIO
 *         has drifted significantly.
 *
 * robot_radius:
 *         Robot radius to use when checking collisions within the trajectory monitor.
 *         The trajectory monitor is only active when in trajectory mode
 *
 * collision_sampling_dt:
 *         The time step to sample along the polynomials by when checking for collisions
 *         in the collision monitor.
 *
 * max_lookahead_distance:
 *         Maximum distance to look along the trajectory. Sensor data further out can be
 *         unrealiable so keeping this value small reduces false positives
 *
 * backtrack_seconds:
 *         Number of seconds worth of position data to store for replay in backtrack mode.
 *
 * backtrack_rc_chan:
 *         RC channel to monitor for transitions into and out of backtrack mode.
 *
 * backtrack_rc_thresh:
 *         Value above which backtrack is considered enabled on the configured RC channel.
 *
 * ##############################################################################
 * ## Fixed Frame Tag Relocalization
 * ##############################################################################
 *
 * en_tag_fixed_frame:
 *         Enable fixed frame relocalization via voa_inputs.
 *         See: https://docs.modalai.com/voxl-vision-px4-apriltag-relocalization/
 *
 * fixed_frame_filter_len:
 *         Length of the moving average filter to use for smooth relocalization
 *         when a tag is detected. Default is 5, a longer filter will result in
 *         smoother behavior when a new tag comes into view. Set to 1 to do no
 *         filtering at all and assume every tag detection is accurate.
 *
 * en_transform_mavlink_pos_setpoints_from_fixed_frame:
 *         When enabled, mavlink position_target_local_ned_t commands received on
 *         via UDP will be assumed to be in fixed frame and are then transformed
 *         to local frame before being sent to PX4. This allows offboard mode
 *         position commands from MAVROS/MAVSDK to be in fixed frame relative to
 *         voa_inputs even though PX4/EKF2 operates in local frame relative to where
 *         VIO initialized.
 *
 * ##############################################################################
 * ## Collision Prevention (VOA)
 * ## Settings for configuring Mavlink data sent to Autopilot for VOA
 * ##############################################################################
 *
 * en_voa:
 *         Enable processing of DFS and TOF data to be sent to PX4 as mavlink
 *         obstacle_distance messages for collision prevention in position mode.
 *
 * voa_lower_bound_m & voa_upper_bound_m:
 *         VOA ignores obstacles above and below the upper and lower bounds.
 *         Remember, Z points downwards in body and NED frames, so the lower bound
 *         is a positive number, and the upper bound is a negative number.
 *         Defaults are lower: 0.15  upper: -0.15 Units are in meters.
 *
 * voa_memory_s:
 *         number of seconds to keep track of sensor readings for VOA
 *         default: 1.0
 *
 * voa_max_pc_per_fusion:
 *         maximum number of sensor samples (points clouds) to fuse for every
 *         mavlink transmision. Default is 100 so that voa_memory_s determines
 *         when to discard old data instead. set this to 1 if you only want to use
 *         the most recent sensor sample for example. If you start severly limiting
 *         the number of point clouds used per fusion, you will also need to lower
 *         voa_pie_threshold.
 *
 * voa_pie_min_dist_m:
 *         minimum distance from the drone's center of mass to consider a sensor
 *         sample a valid point for mavlink transmission.
 *
 * voa_pie_max_dist_m:
 *         minimum distance from the drone's center of mass to consider a sensor
 *         sample a valid point for mavlink transmission. Note this is and can be
 *         different from the individual sensor limits.
 *
 * voa_pie_under_trim_m:
 *         VOA discards points in a bubble under the drone with this radius.
 *         default 1.0. This helps the drone approach an obstacle, stop
 *         ascend, and continue forward smoothly over the top.
 *
 * voa_pie_threshold:
 *         Minimum number of points that must appear in and adjacent to a pie
 *         segment to consider it populated. Default 3
 *
 * voa_send_rate_hz:
 *         Rate to send VOA mavlink data to autopilot. Independent from the
 *         sensor input rates. Default 20
 *
 * voa_pie_slices:
 *         number of slices to divide the 360 degree span around the drone into.
 *         default 36 (10 degree slices)
 *
 * voa_pie_bin_depth_m:
 *         Radial depth of each bin during the pie binning step. Default 0.15
 *
 * ##############################################################################
 * ## Collision Prevention (VOA) Input Configuration
 * ## Settings for configuring pipe data sources for VOA
 * ##############################################################################
 *
 * voa_inputs:
 *         Array of pipes to subscribe to for use with VOA, up to 10 supported
 *         Each entry has 4 fields:
 *
 * Fields:
 *    enabled:      true or false, it's safe to leave this enabled when the pipe is missing
 *    type:         can be point_cloud, tof, or rangefinder
 *    input_pipe:   pipe name, e.g. stereo_front_pc, rangefinders, tof, etc
 *    frame:        frame of reference, should be listed in /etc/modalai/extrinsics/conf
 *    max_depth:    trim away points with z greater than this
 *    min_depth:    trim away points with z less than this
 *    cell_size:    size of 3d voxel grid cells, increase for more downsampling
 *    threshold:    num points that must exist in or adjacent to a cell to consider it
 *                      populated, set to 1 to disable threasholding
 *    x_fov_deg:    FOV of the sensor in the x direction, typically width
 *    y_fov_deg:    FOV of the sensor in the y direction, typically height
 *    conf_cutoff:  discard points below this confidence, only applicable to TOF
 *
 */
{
	"config_file_version":	1,
	"en_localhost_mavlink_udp":	true,
	"localhost_udp_port_number":	14551,
	"en_vio":	true,
	"vio_pipe":	"qvio",
	"secondary_vio_pipe":	"ov",
	"en_reset_vio_if_initialized_inverted":	true,
	"vio_warmup_s":	3,
	"send_odom_while_failed":	true,
	"horizon_cal_tolerance":	0.5,
	"offboard_mode":	"off",
	"follow_tag_id":	0,
	"figure_eight_move_home":	true,
	"robot_radius":	0.300000011920929,
	"collision_sampling_dt":	0.1,
	"max_lookahead_distance":	1,
	"backtrack_seconds":	5,
	"wps_move_home":	true,
	"wps_stride":	0,
	"wps_timeout":	0,
	"wps_damp":	1,
	"en_tag_fixed_frame":	false,
	"fixed_frame_filter_len":	5,
	"en_transform_mavlink_pos_setpoints_from_fixed_frame":	false,
	"en_voa":	true,
	"voa_upper_bound_m":	-0.15000000596046448,
	"voa_lower_bound_m":	0.15000000596046448,
	"voa_voa_memory_s":	1,
	"voa_max_pc_per_fusion":	100,
	"voa_pie_max_dist_m":	20,
	"voa_pie_min_dist_m":	0.25,
	"voa_pie_under_trim_m":	1,
	"voa_pie_threshold":	3,
	"voa_send_rate_hz":	20,
	"voa_pie_slices":	36,
	"voa_pie_bin_depth_m":	0.15000000596046448,
	"voa_inputs":	[{
			"enabled":	true,
			"type":	"point_cloud",
			"input_pipe":	"dfs_point_cloud",
			"frame":	"stereo_l",
			"max_depth":	8,
			"min_depth":	0.300000011920929,
			"cell_size":	0.079999998211860657,
			"threshold":	4,
			"x_fov_deg":	68,
			"y_fov_deg":	56,
			"conf_cutoff":	0
		}, {
			"enabled":	true,
			"type":	"point_cloud",
			"input_pipe":	"stereo_front_pc",
			"frame":	"stereo_front_l",
			"max_depth":	8,
			"min_depth":	0.300000011920929,
			"cell_size":	0.079999998211860657,
			"threshold":	4,
			"x_fov_deg":	68,
			"y_fov_deg":	56,
			"conf_cutoff":	0
		}, {
			"enabled":	true,
			"type":	"point_cloud",
			"input_pipe":	"stereo_rear_pc",
			"frame":	"stereo_rear_l",
			"max_depth":	8,
			"min_depth":	0.300000011920929,
			"cell_size":	0.079999998211860657,
			"threshold":	4,
			"x_fov_deg":	68,
			"y_fov_deg":	56,
			"conf_cutoff":	0
		}, {
			"enabled":	true,
			"type":	"tof",
			"input_pipe":	"tof",
			"frame":	"tof",
			"max_depth":	6,
			"min_depth":	0.15000000596046448,
			"cell_size":	0.079999998211860657,
			"threshold":	3,
			"x_fov_deg":	106.5,
			"y_fov_deg":	85.0999984741211,
			"conf_cutoff":	125
		}, {
			"enabled":	true,
			"type":	"rangefinder",
			"input_pipe":	"rangefinders",
			"frame":	"body",
			"max_depth":	8,
			"min_depth":	0.300000011920929,
			"cell_size":	0.079999998211860657,
			"threshold":	4,
			"x_fov_deg":	68,
			"y_fov_deg":	56,
			"conf_cutoff":	0
		}],
	"backtrack_rc_chan":	10,
	"backtrack_rc_thresh":	1500
}
