// Generated by gencpp from file kr_tracker_msgs/Polynomial.msg
// DO NOT EDIT!


#ifndef KR_TRACKER_MSGS_MESSAGE_POLYNOMIAL_H
#define KR_TRACKER_MSGS_MESSAGE_POLYNOMIAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kr_tracker_msgs
{
template <class ContainerAllocator>
struct Polynomial_
{
  typedef Polynomial_<ContainerAllocator> Type;

  Polynomial_()
    : degree(0)
    , dt(0.0)
    , basis(0)
    , coeffs()  {
    }
  Polynomial_(const ContainerAllocator& _alloc)
    : degree(0)
    , dt(0.0)
    , basis(0)
    , coeffs(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _degree_type;
  _degree_type degree;

   typedef float _dt_type;
  _dt_type dt;

   typedef uint8_t _basis_type;
  _basis_type basis;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _coeffs_type;
  _coeffs_type coeffs;





  typedef boost::shared_ptr< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> const> ConstPtr;

}; // struct Polynomial_

typedef ::kr_tracker_msgs::Polynomial_<std::allocator<void> > Polynomial;

typedef boost::shared_ptr< ::kr_tracker_msgs::Polynomial > PolynomialPtr;
typedef boost::shared_ptr< ::kr_tracker_msgs::Polynomial const> PolynomialConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kr_tracker_msgs::Polynomial_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kr_tracker_msgs::Polynomial_<ContainerAllocator1> & lhs, const ::kr_tracker_msgs::Polynomial_<ContainerAllocator2> & rhs)
{
  return lhs.degree == rhs.degree &&
    lhs.dt == rhs.dt &&
    lhs.basis == rhs.basis &&
    lhs.coeffs == rhs.coeffs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kr_tracker_msgs::Polynomial_<ContainerAllocator1> & lhs, const ::kr_tracker_msgs::Polynomial_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kr_tracker_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "364f75c2ff53cd714f15f5974ff407e2";
  }

  static const char* value(const ::kr_tracker_msgs::Polynomial_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x364f75c2ff53cd71ULL;
  static const uint64_t static_value2 = 0x4f15f5974ff407e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kr_tracker_msgs/Polynomial";
  }

  static const char* value(const ::kr_tracker_msgs::Polynomial_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# There should be 1 more coeffs than the degree\n"
"int32 degree\n"
"float32 dt\n"
"uint8 basis\n"
"float32[] coeffs\n"
;
  }

  static const char* value(const ::kr_tracker_msgs::Polynomial_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.degree);
      stream.next(m.dt);
      stream.next(m.basis);
      stream.next(m.coeffs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Polynomial_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kr_tracker_msgs::Polynomial_<ContainerAllocator>& v)
  {
    s << indent << "degree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.degree);
    s << indent << "dt: ";
    Printer<float>::stream(s, indent + "  ", v.dt);
    s << indent << "basis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.basis);
    s << indent << "coeffs[]" << std::endl;
    for (size_t i = 0; i < v.coeffs.size(); ++i)
    {
      s << indent << "  coeffs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coeffs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KR_TRACKER_MSGS_MESSAGE_POLYNOMIAL_H
