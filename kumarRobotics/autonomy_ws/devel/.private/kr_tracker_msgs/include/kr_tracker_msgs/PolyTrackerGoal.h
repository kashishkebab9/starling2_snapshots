// Generated by gencpp from file kr_tracker_msgs/PolyTrackerGoal.msg
// DO NOT EDIT!


#ifndef KR_TRACKER_MSGS_MESSAGE_POLYTRACKERGOAL_H
#define KR_TRACKER_MSGS_MESSAGE_POLYTRACKERGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kr_tracker_msgs/Polynomial.h>
#include <kr_tracker_msgs/Polynomial.h>
#include <kr_tracker_msgs/Polynomial.h>
#include <kr_tracker_msgs/Polynomial.h>
#include <geometry_msgs/Point.h>

namespace kr_tracker_msgs
{
template <class ContainerAllocator>
struct PolyTrackerGoal_
{
  typedef PolyTrackerGoal_<ContainerAllocator> Type;

  PolyTrackerGoal_()
    : t_start()
    , order(0)
    , set_yaw(false)
    , separate_yaw(false)
    , start_yaw(0.0)
    , final_yaw(0.0)
    , seg_x()
    , seg_y()
    , seg_z()
    , seg_yaw()
    , cpts_status(0)
    , pos_pts()
    , yaw_pts()
    , knots()  {
    }
  PolyTrackerGoal_(const ContainerAllocator& _alloc)
    : t_start()
    , order(0)
    , set_yaw(false)
    , separate_yaw(false)
    , start_yaw(0.0)
    , final_yaw(0.0)
    , seg_x(_alloc)
    , seg_y(_alloc)
    , seg_z(_alloc)
    , seg_yaw(_alloc)
    , cpts_status(0)
    , pos_pts(_alloc)
    , yaw_pts(_alloc)
    , knots(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _t_start_type;
  _t_start_type t_start;

   typedef uint8_t _order_type;
  _order_type order;

   typedef uint8_t _set_yaw_type;
  _set_yaw_type set_yaw;

   typedef uint8_t _separate_yaw_type;
  _separate_yaw_type separate_yaw;

   typedef double _start_yaw_type;
  _start_yaw_type start_yaw;

   typedef double _final_yaw_type;
  _final_yaw_type final_yaw;

   typedef std::vector< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >> _seg_x_type;
  _seg_x_type seg_x;

   typedef std::vector< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >> _seg_y_type;
  _seg_y_type seg_y;

   typedef std::vector< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >> _seg_z_type;
  _seg_z_type seg_z;

   typedef std::vector< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >> _seg_yaw_type;
  _seg_yaw_type seg_yaw;

   typedef int8_t _cpts_status_type;
  _cpts_status_type cpts_status;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _pos_pts_type;
  _pos_pts_type pos_pts;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _yaw_pts_type;
  _yaw_pts_type yaw_pts;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _knots_type;
  _knots_type knots;





  typedef boost::shared_ptr< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PolyTrackerGoal_

typedef ::kr_tracker_msgs::PolyTrackerGoal_<std::allocator<void> > PolyTrackerGoal;

typedef boost::shared_ptr< ::kr_tracker_msgs::PolyTrackerGoal > PolyTrackerGoalPtr;
typedef boost::shared_ptr< ::kr_tracker_msgs::PolyTrackerGoal const> PolyTrackerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator1> & lhs, const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.t_start == rhs.t_start &&
    lhs.order == rhs.order &&
    lhs.set_yaw == rhs.set_yaw &&
    lhs.separate_yaw == rhs.separate_yaw &&
    lhs.start_yaw == rhs.start_yaw &&
    lhs.final_yaw == rhs.final_yaw &&
    lhs.seg_x == rhs.seg_x &&
    lhs.seg_y == rhs.seg_y &&
    lhs.seg_z == rhs.seg_z &&
    lhs.seg_yaw == rhs.seg_yaw &&
    lhs.cpts_status == rhs.cpts_status &&
    lhs.pos_pts == rhs.pos_pts &&
    lhs.yaw_pts == rhs.yaw_pts &&
    lhs.knots == rhs.knots;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator1> & lhs, const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kr_tracker_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5217be2ae52ee3910cfb3c0222972da5";
  }

  static const char* value(const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5217be2ae52ee391ULL;
  static const uint64_t static_value2 = 0x0cfb3c0222972da5ULL;
};

template<class ContainerAllocator>
struct DataType< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kr_tracker_msgs/PolyTrackerGoal";
  }

  static const char* value(const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"time t_start\n"
"uint8 order\n"
"bool set_yaw\n"
"bool separate_yaw\n"
"float64 start_yaw\n"
"float64 final_yaw\n"
"kr_tracker_msgs/Polynomial[] seg_x\n"
"kr_tracker_msgs/Polynomial[] seg_y\n"
"kr_tracker_msgs/Polynomial[] seg_z\n"
"kr_tracker_msgs/Polynomial[] seg_yaw\n"
"int8 cpts_status # 0 is no valid cpts, 1 is berstein, 2 is bspline\n"
"geometry_msgs/Point[] pos_pts \n"
"float64[] yaw_pts\n"
"float32[] knots\n"
"\n"
"================================================================================\n"
"MSG: kr_tracker_msgs/Polynomial\n"
"# There should be 1 more coeffs than the degree\n"
"int32 degree\n"
"float32 dt\n"
"uint8 basis\n"
"float32[] coeffs\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t_start);
      stream.next(m.order);
      stream.next(m.set_yaw);
      stream.next(m.separate_yaw);
      stream.next(m.start_yaw);
      stream.next(m.final_yaw);
      stream.next(m.seg_x);
      stream.next(m.seg_y);
      stream.next(m.seg_z);
      stream.next(m.seg_yaw);
      stream.next(m.cpts_status);
      stream.next(m.pos_pts);
      stream.next(m.yaw_pts);
      stream.next(m.knots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolyTrackerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kr_tracker_msgs::PolyTrackerGoal_<ContainerAllocator>& v)
  {
    s << indent << "t_start: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t_start);
    s << indent << "order: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.order);
    s << indent << "set_yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_yaw);
    s << indent << "separate_yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.separate_yaw);
    s << indent << "start_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.start_yaw);
    s << indent << "final_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.final_yaw);
    s << indent << "seg_x[]" << std::endl;
    for (size_t i = 0; i < v.seg_x.size(); ++i)
    {
      s << indent << "  seg_x[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >::stream(s, indent + "    ", v.seg_x[i]);
    }
    s << indent << "seg_y[]" << std::endl;
    for (size_t i = 0; i < v.seg_y.size(); ++i)
    {
      s << indent << "  seg_y[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >::stream(s, indent + "    ", v.seg_y[i]);
    }
    s << indent << "seg_z[]" << std::endl;
    for (size_t i = 0; i < v.seg_z.size(); ++i)
    {
      s << indent << "  seg_z[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >::stream(s, indent + "    ", v.seg_z[i]);
    }
    s << indent << "seg_yaw[]" << std::endl;
    for (size_t i = 0; i < v.seg_yaw.size(); ++i)
    {
      s << indent << "  seg_yaw[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kr_tracker_msgs::Polynomial_<ContainerAllocator> >::stream(s, indent + "    ", v.seg_yaw[i]);
    }
    s << indent << "cpts_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cpts_status);
    s << indent << "pos_pts[]" << std::endl;
    for (size_t i = 0; i < v.pos_pts.size(); ++i)
    {
      s << indent << "  pos_pts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pos_pts[i]);
    }
    s << indent << "yaw_pts[]" << std::endl;
    for (size_t i = 0; i < v.yaw_pts.size(); ++i)
    {
      s << indent << "  yaw_pts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaw_pts[i]);
    }
    s << indent << "knots[]" << std::endl;
    for (size_t i = 0; i < v.knots.size(); ++i)
    {
      s << indent << "  knots[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.knots[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KR_TRACKER_MSGS_MESSAGE_POLYTRACKERGOAL_H
