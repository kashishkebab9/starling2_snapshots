// Generated by gencpp from file kr_tracker_msgs/TrackerStatus.msg
// DO NOT EDIT!


#ifndef KR_TRACKER_MSGS_MESSAGE_TRACKERSTATUS_H
#define KR_TRACKER_MSGS_MESSAGE_TRACKERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kr_tracker_msgs
{
template <class ContainerAllocator>
struct TrackerStatus_
{
  typedef TrackerStatus_<ContainerAllocator> Type;

  TrackerStatus_()
    : header()
    , tracker()
    , status(0)  {
    }
  TrackerStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tracker(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tracker_type;
  _tracker_type tracker;

   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTIVE)
  #undef ACTIVE
#endif
#if defined(_WIN32) && defined(SUCCEEDED)
  #undef SUCCEEDED
#endif

  enum {
    ACTIVE = 0u,
    SUCCEEDED = 1u,
  };


  typedef boost::shared_ptr< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TrackerStatus_

typedef ::kr_tracker_msgs::TrackerStatus_<std::allocator<void> > TrackerStatus;

typedef boost::shared_ptr< ::kr_tracker_msgs::TrackerStatus > TrackerStatusPtr;
typedef boost::shared_ptr< ::kr_tracker_msgs::TrackerStatus const> TrackerStatusConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator1> & lhs, const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tracker == rhs.tracker &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator1> & lhs, const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kr_tracker_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90a1e2acaea8ad921eedfd5e14564b45";
  }

  static const char* value(const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90a1e2acaea8ad92ULL;
  static const uint64_t static_value2 = 0x1eedfd5e14564b45ULL;
};

template<class ContainerAllocator>
struct DataType< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kr_tracker_msgs/TrackerStatus";
  }

  static const char* value(const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string tracker\n"
"uint8 status\n"
"\n"
"# Options for the status\n"
"uint8 ACTIVE    = 0             # Currently active\n"
"uint8 SUCCEEDED = 1             # The tracker has finished\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tracker);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kr_tracker_msgs::TrackerStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tracker: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tracker);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KR_TRACKER_MSGS_MESSAGE_TRACKERSTATUS_H
