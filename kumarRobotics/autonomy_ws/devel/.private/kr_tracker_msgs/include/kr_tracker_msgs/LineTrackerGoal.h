// Generated by gencpp from file kr_tracker_msgs/LineTrackerGoal.msg
// DO NOT EDIT!


#ifndef KR_TRACKER_MSGS_MESSAGE_LINETRACKERGOAL_H
#define KR_TRACKER_MSGS_MESSAGE_LINETRACKERGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kr_tracker_msgs
{
template <class ContainerAllocator>
struct LineTrackerGoal_
{
  typedef LineTrackerGoal_<ContainerAllocator> Type;

  LineTrackerGoal_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw(0.0)
    , v_des(0.0)
    , a_des(0.0)
    , relative(false)
    , t_start()
    , duration()  {
    }
  LineTrackerGoal_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw(0.0)
    , v_des(0.0)
    , a_des(0.0)
    , relative(false)
    , t_start()
    , duration()  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _v_des_type;
  _v_des_type v_des;

   typedef double _a_des_type;
  _a_des_type a_des;

   typedef uint8_t _relative_type;
  _relative_type relative;

   typedef ros::Time _t_start_type;
  _t_start_type t_start;

   typedef ros::Duration _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LineTrackerGoal_

typedef ::kr_tracker_msgs::LineTrackerGoal_<std::allocator<void> > LineTrackerGoal;

typedef boost::shared_ptr< ::kr_tracker_msgs::LineTrackerGoal > LineTrackerGoalPtr;
typedef boost::shared_ptr< ::kr_tracker_msgs::LineTrackerGoal const> LineTrackerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator1> & lhs, const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.yaw == rhs.yaw &&
    lhs.v_des == rhs.v_des &&
    lhs.a_des == rhs.a_des &&
    lhs.relative == rhs.relative &&
    lhs.t_start == rhs.t_start &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator1> & lhs, const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kr_tracker_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac56bfe78e143cd5e01249042f1cdb15";
  }

  static const char* value(const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac56bfe78e143cd5ULL;
  static const uint64_t static_value2 = 0xe01249042f1cdb15ULL;
};

template<class ContainerAllocator>
struct DataType< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kr_tracker_msgs/LineTrackerGoal";
  }

  static const char* value(const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 yaw\n"
"float64 v_des\n"
"float64 a_des\n"
"bool relative\n"
"time t_start\n"
"duration duration\n"
;
  }

  static const char* value(const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.yaw);
      stream.next(m.v_des);
      stream.next(m.a_des);
      stream.next(m.relative);
      stream.next(m.t_start);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineTrackerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kr_tracker_msgs::LineTrackerGoal_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "v_des: ";
    Printer<double>::stream(s, indent + "  ", v.v_des);
    s << indent << "a_des: ";
    Printer<double>::stream(s, indent + "  ", v.a_des);
    s << indent << "relative: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative);
    s << indent << "t_start: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t_start);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KR_TRACKER_MSGS_MESSAGE_LINETRACKERGOAL_H
