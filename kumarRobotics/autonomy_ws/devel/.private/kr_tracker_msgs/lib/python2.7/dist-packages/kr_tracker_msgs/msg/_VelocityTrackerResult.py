# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kr_tracker_msgs/VelocityTrackerResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VelocityTrackerResult(genpy.Message):
  _md5sum = "bacc048b855c2d3ab27b483c690b44f0"
  _type = "kr_tracker_msgs/VelocityTrackerResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
# send back goal
float64 vx
float64 vy
float64 vz
float64 vyaw
bool use_position_gains
# time duration of the trajectory
float64 duration 
# approximate arc length of the trajectory (ie. sum of distances between position commands)
float64 length 
"""
  __slots__ = ['vx','vy','vz','vyaw','use_position_gains','duration','length']
  _slot_types = ['float64','float64','float64','float64','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vx,vy,vz,vyaw,use_position_gains,duration,length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VelocityTrackerResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.vyaw is None:
        self.vyaw = 0.
      if self.use_position_gains is None:
        self.use_position_gains = False
      if self.duration is None:
        self.duration = 0.
      if self.length is None:
        self.length = 0.
    else:
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.vyaw = 0.
      self.use_position_gains = False
      self.duration = 0.
      self.length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4dB2d().pack(_x.vx, _x.vy, _x.vz, _x.vyaw, _x.use_position_gains, _x.duration, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.vx, _x.vy, _x.vz, _x.vyaw, _x.use_position_gains, _x.duration, _x.length,) = _get_struct_4dB2d().unpack(str[start:end])
      self.use_position_gains = bool(self.use_position_gains)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4dB2d().pack(_x.vx, _x.vy, _x.vz, _x.vyaw, _x.use_position_gains, _x.duration, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.vx, _x.vy, _x.vz, _x.vyaw, _x.use_position_gains, _x.duration, _x.length,) = _get_struct_4dB2d().unpack(str[start:end])
      self.use_position_gains = bool(self.use_position_gains)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4dB2d = None
def _get_struct_4dB2d():
    global _struct_4dB2d
    if _struct_4dB2d is None:
        _struct_4dB2d = struct.Struct("<4dB2d")
    return _struct_4dB2d
