//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the kr_mav_controllers package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __kr_mav_controllers__SO3CONFIG_H__
#define __kr_mav_controllers__SO3CONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace kr_mav_controllers
{
  class SO3ConfigStatics;

  class SO3Config
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(SO3Config &config, const SO3Config &max, const SO3Config &min) const = 0;
      virtual void calcLevel(uint32_t &level, const SO3Config &config1, const SO3Config &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, SO3Config &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const SO3Config &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, SO3Config &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const SO3Config &config) const = 0;
      virtual void getValue(const SO3Config &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T SO3Config::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T SO3Config::* field;

      virtual void clamp(SO3Config &config, const SO3Config &max, const SO3Config &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const SO3Config &config1, const SO3Config &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, SO3Config &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const SO3Config &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, SO3Config &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const SO3Config &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const SO3Config &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, SO3Config &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, SO3Config &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<SO3Config::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(SO3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class TRANSLATION_GAINS
{
  public:
    TRANSLATION_GAINS()
    {
      state = true;
      name = "Translation_Gains";
    }

    void setParams(SO3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("kp_x"==(*_i)->name){kp_x = boost::any_cast<double>(val);}
        if("kp_y"==(*_i)->name){kp_y = boost::any_cast<double>(val);}
        if("kp_z"==(*_i)->name){kp_z = boost::any_cast<double>(val);}
        if("kd_x"==(*_i)->name){kd_x = boost::any_cast<double>(val);}
        if("kd_y"==(*_i)->name){kd_y = boost::any_cast<double>(val);}
        if("kd_z"==(*_i)->name){kd_z = boost::any_cast<double>(val);}
      }
    }

    double kp_x;
double kp_y;
double kp_z;
double kd_x;
double kd_y;
double kd_z;

    bool state;
    std::string name;

    
}translation_gains;

class INTEGRAL_GAINS
{
  public:
    INTEGRAL_GAINS()
    {
      state = true;
      name = "Integral_Gains";
    }

    void setParams(SO3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("ki_x"==(*_i)->name){ki_x = boost::any_cast<double>(val);}
        if("ki_y"==(*_i)->name){ki_y = boost::any_cast<double>(val);}
        if("ki_z"==(*_i)->name){ki_z = boost::any_cast<double>(val);}
        if("kib_x"==(*_i)->name){kib_x = boost::any_cast<double>(val);}
        if("kib_y"==(*_i)->name){kib_y = boost::any_cast<double>(val);}
        if("kib_z"==(*_i)->name){kib_z = boost::any_cast<double>(val);}
      }
    }

    double ki_x;
double ki_y;
double ki_z;
double kib_x;
double kib_y;
double kib_z;

    bool state;
    std::string name;

    
}integral_gains;

class ATTITUDE_GAINS
{
  public:
    ATTITUDE_GAINS()
    {
      state = true;
      name = "Attitude_Gains";
    }

    void setParams(SO3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("rot_x"==(*_i)->name){rot_x = boost::any_cast<double>(val);}
        if("rot_y"==(*_i)->name){rot_y = boost::any_cast<double>(val);}
        if("rot_z"==(*_i)->name){rot_z = boost::any_cast<double>(val);}
        if("ang_x"==(*_i)->name){ang_x = boost::any_cast<double>(val);}
        if("ang_y"==(*_i)->name){ang_y = boost::any_cast<double>(val);}
        if("ang_z"==(*_i)->name){ang_z = boost::any_cast<double>(val);}
      }
    }

    double rot_x;
double rot_y;
double rot_z;
double ang_x;
double ang_y;
double ang_z;

    bool state;
    std::string name;

    
}attitude_gains;

class CORRECTIONS
{
  public:
    CORRECTIONS()
    {
      state = true;
      name = "Corrections";
    }

    void setParams(SO3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("kf_correction"==(*_i)->name){kf_correction = boost::any_cast<double>(val);}
        if("roll_correction"==(*_i)->name){roll_correction = boost::any_cast<double>(val);}
        if("pitch_correction"==(*_i)->name){pitch_correction = boost::any_cast<double>(val);}
      }
    }

    double kf_correction;
double roll_correction;
double pitch_correction;

    bool state;
    std::string name;

    
}corrections;

class MAXES_AND_LIMITS
{
  public:
    MAXES_AND_LIMITS()
    {
      state = true;
      name = "Maxes_and_limits";
    }

    void setParams(SO3Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_pos_int"==(*_i)->name){max_pos_int = boost::any_cast<double>(val);}
        if("max_pos_int_b"==(*_i)->name){max_pos_int_b = boost::any_cast<double>(val);}
        if("max_tilt_angle"==(*_i)->name){max_tilt_angle = boost::any_cast<double>(val);}
      }
    }

    double max_pos_int;
double max_pos_int_b;
double max_tilt_angle;

    bool state;
    std::string name;

    
}maxes_and_limits;

}groups;



//#line 10 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kp_x;
//#line 11 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kp_y;
//#line 12 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kp_z;
//#line 14 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kd_x;
//#line 15 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kd_y;
//#line 16 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kd_z;
//#line 20 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double ki_x;
//#line 21 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double ki_y;
//#line 22 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double ki_z;
//#line 24 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kib_x;
//#line 25 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kib_y;
//#line 26 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kib_z;
//#line 30 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double rot_x;
//#line 31 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double rot_y;
//#line 32 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double rot_z;
//#line 34 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double ang_x;
//#line 35 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double ang_y;
//#line 36 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double ang_z;
//#line 41 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double kf_correction;
//#line 42 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double roll_correction;
//#line 43 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double pitch_correction;
//#line 47 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double max_pos_int;
//#line 48 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double max_pos_int_b;
//#line 49 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      double max_tilt_angle;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("SO3Config::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const SO3Config &__max__ = __getMax__();
      const SO3Config &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const SO3Config &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const SO3Config &__getDefault__();
    static const SO3Config &__getMax__();
    static const SO3Config &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const SO3ConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void SO3Config::ParamDescription<std::string>::clamp(SO3Config &config, const SO3Config &max, const SO3Config &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class SO3ConfigStatics
  {
    friend class SO3Config;

    SO3ConfigStatics()
    {
SO3Config::GroupDescription<SO3Config::DEFAULT, SO3Config> Default("Default", "", 0, 0, true, &SO3Config::groups);
SO3Config::GroupDescription<SO3Config::DEFAULT::TRANSLATION_GAINS, SO3Config::DEFAULT> Translation_Gains("Translation_Gains", "", 0, 1, true, &SO3Config::DEFAULT::translation_gains);
//#line 10 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kp_x = 0.0;
//#line 10 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kp_x = 20.0;
//#line 10 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kp_x = 7.4;
//#line 10 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Translation_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kp_x", "double", 1, "World x position gain", "", &SO3Config::kp_x)));
//#line 10 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kp_x", "double", 1, "World x position gain", "", &SO3Config::kp_x)));
//#line 11 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kp_y = 0.0;
//#line 11 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kp_y = 20.0;
//#line 11 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kp_y = 7.4;
//#line 11 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Translation_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kp_y", "double", 1, "World y position gain", "", &SO3Config::kp_y)));
//#line 11 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kp_y", "double", 1, "World y position gain", "", &SO3Config::kp_y)));
//#line 12 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kp_z = 0.0;
//#line 12 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kp_z = 20.0;
//#line 12 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kp_z = 10.4;
//#line 12 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Translation_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kp_z", "double", 1, "World z position gain", "", &SO3Config::kp_z)));
//#line 12 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kp_z", "double", 1, "World z position gain", "", &SO3Config::kp_z)));
//#line 14 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kd_x = 0.0;
//#line 14 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kd_x = 20.0;
//#line 14 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kd_x = 4.8;
//#line 14 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Translation_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kd_x", "double", 1, "World x derivative gain", "", &SO3Config::kd_x)));
//#line 14 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kd_x", "double", 1, "World x derivative gain", "", &SO3Config::kd_x)));
//#line 15 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kd_y = 0.0;
//#line 15 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kd_y = 20.0;
//#line 15 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kd_y = 4.8;
//#line 15 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Translation_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kd_y", "double", 1, "World y derivative gain", "", &SO3Config::kd_y)));
//#line 15 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kd_y", "double", 1, "World y derivative gain", "", &SO3Config::kd_y)));
//#line 16 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kd_z = 0.0;
//#line 16 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kd_z = 20.0;
//#line 16 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kd_z = 6.0;
//#line 16 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Translation_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kd_z", "double", 1, "World z derivative gain", "", &SO3Config::kd_z)));
//#line 16 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kd_z", "double", 1, "World z derivative gain", "", &SO3Config::kd_z)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Translation_Gains.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::TRANSLATION_GAINS, SO3Config::DEFAULT>(Translation_Gains)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::TRANSLATION_GAINS, SO3Config::DEFAULT>(Translation_Gains)));
SO3Config::GroupDescription<SO3Config::DEFAULT::INTEGRAL_GAINS, SO3Config::DEFAULT> Integral_Gains("Integral_Gains", "", 0, 2, true, &SO3Config::DEFAULT::integral_gains);
//#line 20 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.ki_x = 0.0;
//#line 20 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.ki_x = 0.2;
//#line 20 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.ki_x = 0.0;
//#line 20 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Integral_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ki_x", "double", 2, "World x integral gain", "", &SO3Config::ki_x)));
//#line 20 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ki_x", "double", 2, "World x integral gain", "", &SO3Config::ki_x)));
//#line 21 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.ki_y = 0.0;
//#line 21 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.ki_y = 0.2;
//#line 21 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.ki_y = 0.0;
//#line 21 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Integral_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ki_y", "double", 2, "World y integral gain", "", &SO3Config::ki_y)));
//#line 21 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ki_y", "double", 2, "World y integral gain", "", &SO3Config::ki_y)));
//#line 22 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.ki_z = 0.0;
//#line 22 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.ki_z = 0.2;
//#line 22 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.ki_z = 0.0;
//#line 22 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Integral_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ki_z", "double", 2, "World z integral gain", "", &SO3Config::ki_z)));
//#line 22 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ki_z", "double", 2, "World z integral gain", "", &SO3Config::ki_z)));
//#line 24 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kib_x = 0.0;
//#line 24 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kib_x = 0.2;
//#line 24 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kib_x = 0.0;
//#line 24 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Integral_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kib_x", "double", 2, "Body x integral gain", "", &SO3Config::kib_x)));
//#line 24 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kib_x", "double", 2, "Body x integral gain", "", &SO3Config::kib_x)));
//#line 25 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kib_y = 0.0;
//#line 25 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kib_y = 0.2;
//#line 25 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kib_y = 0.0;
//#line 25 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Integral_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kib_y", "double", 2, "Body y integral gain", "", &SO3Config::kib_y)));
//#line 25 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kib_y", "double", 2, "Body y integral gain", "", &SO3Config::kib_y)));
//#line 26 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kib_z = 0.0;
//#line 26 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kib_z = 0.2;
//#line 26 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kib_z = 0.0;
//#line 26 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Integral_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kib_z", "double", 2, "Body z integral gain", "", &SO3Config::kib_z)));
//#line 26 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kib_z", "double", 2, "Body z integral gain", "", &SO3Config::kib_z)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Integral_Gains.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::INTEGRAL_GAINS, SO3Config::DEFAULT>(Integral_Gains)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::INTEGRAL_GAINS, SO3Config::DEFAULT>(Integral_Gains)));
SO3Config::GroupDescription<SO3Config::DEFAULT::ATTITUDE_GAINS, SO3Config::DEFAULT> Attitude_Gains("Attitude_Gains", "", 0, 3, true, &SO3Config::DEFAULT::attitude_gains);
//#line 30 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.rot_x = 0.0;
//#line 30 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.rot_x = 3.0;
//#line 30 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.rot_x = 1.5;
//#line 30 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Attitude_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("rot_x", "double", 4, "Rotation x gain", "", &SO3Config::rot_x)));
//#line 30 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("rot_x", "double", 4, "Rotation x gain", "", &SO3Config::rot_x)));
//#line 31 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.rot_y = 0.0;
//#line 31 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.rot_y = 3.0;
//#line 31 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.rot_y = 1.5;
//#line 31 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Attitude_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("rot_y", "double", 4, "Rotation y gain", "", &SO3Config::rot_y)));
//#line 31 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("rot_y", "double", 4, "Rotation y gain", "", &SO3Config::rot_y)));
//#line 32 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.rot_z = 0.0;
//#line 32 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.rot_z = 3.0;
//#line 32 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.rot_z = 1.0;
//#line 32 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Attitude_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("rot_z", "double", 4, "Rotation z gain", "", &SO3Config::rot_z)));
//#line 32 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("rot_z", "double", 4, "Rotation z gain", "", &SO3Config::rot_z)));
//#line 34 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.ang_x = 0.0;
//#line 34 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.ang_x = 1.0;
//#line 34 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.ang_x = 0.13;
//#line 34 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Attitude_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ang_x", "double", 4, "Angular x gain", "", &SO3Config::ang_x)));
//#line 34 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ang_x", "double", 4, "Angular x gain", "", &SO3Config::ang_x)));
//#line 35 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.ang_y = 0.0;
//#line 35 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.ang_y = 1.0;
//#line 35 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.ang_y = 0.13;
//#line 35 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Attitude_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ang_y", "double", 4, "Angular y gain", "", &SO3Config::ang_y)));
//#line 35 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ang_y", "double", 4, "Angular y gain", "", &SO3Config::ang_y)));
//#line 36 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.ang_z = 0.0;
//#line 36 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.ang_z = 1.0;
//#line 36 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.ang_z = 0.1;
//#line 36 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Attitude_Gains.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ang_z", "double", 4, "Angular z gain", "", &SO3Config::ang_z)));
//#line 36 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("ang_z", "double", 4, "Angular z gain", "", &SO3Config::ang_z)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Attitude_Gains.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::ATTITUDE_GAINS, SO3Config::DEFAULT>(Attitude_Gains)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::ATTITUDE_GAINS, SO3Config::DEFAULT>(Attitude_Gains)));
SO3Config::GroupDescription<SO3Config::DEFAULT::CORRECTIONS, SO3Config::DEFAULT> Corrections("Corrections", "", 0, 4, true, &SO3Config::DEFAULT::corrections);
//#line 41 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.kf_correction = 0.0;
//#line 41 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.kf_correction = 0.0;
//#line 41 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.kf_correction = 0.0;
//#line 41 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Corrections.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kf_correction", "double", 8, "kf", "", &SO3Config::kf_correction)));
//#line 41 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("kf_correction", "double", 8, "kf", "", &SO3Config::kf_correction)));
//#line 42 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.roll_correction = 0.0;
//#line 42 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.roll_correction = 0.0;
//#line 42 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.roll_correction = 0.0;
//#line 42 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Corrections.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("roll_correction", "double", 8, "roll", "", &SO3Config::roll_correction)));
//#line 42 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("roll_correction", "double", 8, "roll", "", &SO3Config::roll_correction)));
//#line 43 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.pitch_correction = 0.0;
//#line 43 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.pitch_correction = 0.0;
//#line 43 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.pitch_correction = 0.0;
//#line 43 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Corrections.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("pitch_correction", "double", 8, "pitch", "", &SO3Config::pitch_correction)));
//#line 43 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("pitch_correction", "double", 8, "pitch", "", &SO3Config::pitch_correction)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Corrections.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::CORRECTIONS, SO3Config::DEFAULT>(Corrections)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::CORRECTIONS, SO3Config::DEFAULT>(Corrections)));
SO3Config::GroupDescription<SO3Config::DEFAULT::MAXES_AND_LIMITS, SO3Config::DEFAULT> Maxes_and_limits("Maxes_and_limits", "", 0, 5, true, &SO3Config::DEFAULT::maxes_and_limits);
//#line 47 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.max_pos_int = 0.0;
//#line 47 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.max_pos_int = 4.0;
//#line 47 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.max_pos_int = 0.0;
//#line 47 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Maxes_and_limits.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("max_pos_int", "double", 16, "World max integral", "", &SO3Config::max_pos_int)));
//#line 47 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("max_pos_int", "double", 16, "World max integral", "", &SO3Config::max_pos_int)));
//#line 48 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.max_pos_int_b = 0.0;
//#line 48 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.max_pos_int_b = 4.0;
//#line 48 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.max_pos_int_b = 0.0;
//#line 48 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Maxes_and_limits.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("max_pos_int_b", "double", 16, "Body max integral", "", &SO3Config::max_pos_int_b)));
//#line 48 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("max_pos_int_b", "double", 16, "Body max integral", "", &SO3Config::max_pos_int_b)));
//#line 49 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __min__.max_tilt_angle = 0.0;
//#line 49 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __max__.max_tilt_angle = 3.14;
//#line 49 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __default__.max_tilt_angle = 3.14;
//#line 49 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      Maxes_and_limits.abstract_parameters.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("max_tilt_angle", "double", 16, "Max tilt angle", "", &SO3Config::max_tilt_angle)));
//#line 49 "/home/root/kumarRobotics/autonomy_ws/src/kr_mav_control/kr_mav_controllers/cfg/SO3.cfg"
      __param_descriptions__.push_back(SO3Config::AbstractParamDescriptionConstPtr(new SO3Config::ParamDescription<double>("max_tilt_angle", "double", 16, "Max tilt angle", "", &SO3Config::max_tilt_angle)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Maxes_and_limits.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::MAXES_AND_LIMITS, SO3Config::DEFAULT>(Maxes_and_limits)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT::MAXES_AND_LIMITS, SO3Config::DEFAULT>(Maxes_and_limits)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SO3Config::AbstractGroupDescriptionConstPtr(new SO3Config::GroupDescription<SO3Config::DEFAULT, SO3Config>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<SO3Config::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<SO3Config::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<SO3Config::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    SO3Config __max__;
    SO3Config __min__;
    SO3Config __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const SO3ConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static SO3ConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &SO3Config::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const SO3Config &SO3Config::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const SO3Config &SO3Config::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const SO3Config &SO3Config::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<SO3Config::AbstractParamDescriptionConstPtr> &SO3Config::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<SO3Config::AbstractGroupDescriptionConstPtr> &SO3Config::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const SO3ConfigStatics *SO3Config::__get_statics__()
  {
    const static SO3ConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = SO3ConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __SO3RECONFIGURATOR_H__
