// Generated by gencpp from file kr_mav_msgs/MotorRPM.msg
// DO NOT EDIT!


#ifndef KR_MAV_MSGS_MESSAGE_MOTORRPM_H
#define KR_MAV_MSGS_MESSAGE_MOTORRPM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kr_mav_msgs
{
template <class ContainerAllocator>
struct MotorRPM_
{
  typedef MotorRPM_<ContainerAllocator> Type;

  MotorRPM_()
    : header()
    , motor_count(0)
    , rpm()  {
      rpm.assign(0);
  }
  MotorRPM_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , motor_count(0)
    , rpm()  {
  (void)_alloc;
      rpm.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _motor_count_type;
  _motor_count_type motor_count;

   typedef boost::array<int16_t, 8>  _rpm_type;
  _rpm_type rpm;





  typedef boost::shared_ptr< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> const> ConstPtr;

}; // struct MotorRPM_

typedef ::kr_mav_msgs::MotorRPM_<std::allocator<void> > MotorRPM;

typedef boost::shared_ptr< ::kr_mav_msgs::MotorRPM > MotorRPMPtr;
typedef boost::shared_ptr< ::kr_mav_msgs::MotorRPM const> MotorRPMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kr_mav_msgs::MotorRPM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kr_mav_msgs::MotorRPM_<ContainerAllocator1> & lhs, const ::kr_mav_msgs::MotorRPM_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.motor_count == rhs.motor_count &&
    lhs.rpm == rhs.rpm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kr_mav_msgs::MotorRPM_<ContainerAllocator1> & lhs, const ::kr_mav_msgs::MotorRPM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kr_mav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa0b8f1e09aa084c2f05fdb94e7b972e";
  }

  static const char* value(const ::kr_mav_msgs::MotorRPM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa0b8f1e09aa084cULL;
  static const uint64_t static_value2 = 0x2f05fdb94e7b972eULL;
};

template<class ContainerAllocator>
struct DataType< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kr_mav_msgs/MotorRPM";
  }

  static const char* value(const ::kr_mav_msgs::MotorRPM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 motor_count\n"
"int16[8] rpm\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kr_mav_msgs::MotorRPM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.motor_count);
      stream.next(m.rpm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorRPM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kr_mav_msgs::MotorRPM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kr_mav_msgs::MotorRPM_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motor_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_count);
    s << indent << "rpm[]" << std::endl;
    for (size_t i = 0; i < v.rpm.size(); ++i)
    {
      s << indent << "  rpm[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.rpm[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KR_MAV_MSGS_MESSAGE_MOTORRPM_H
